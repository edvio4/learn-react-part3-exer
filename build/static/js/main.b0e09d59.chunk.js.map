{"version":3,"sources":["logo.svg","components/Filter.js","services/phonebook.js","components/Part2bExer/Form.js","components/Part2bExer/Part2bExer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Filter","filter","handleFilterChange","value","onChange","axios","get","then","response","data","newObject","post","id","put","delete","Form","newPerson","setNewPerson","persons","setPersons","onSubmit","event","preventDefault","match","find","person","name","number","window","alert","result","confirm","changedPerson","phonebookService","updatedPerson","map","per","createdPerson","concat","catch","error","required","target","type","Part2bExer","useState","setFilter","handleDelete","useEffect","peopleToShow","RegExp","test","toLowerCase","key","onClick","App","notes","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,mJCc5BC,EAZA,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,mBACrB,OACI,iDAEI,2BACIC,MAAOF,EACPG,SAAUF,MCkBX,EAvBA,WAEX,OADgBG,IAAMC,IAHV,gBAKPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAoBpB,EAjBA,SAAAC,GAEX,OADgBL,IAAMM,KATV,eASwBD,GAE/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAcpB,EAXA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAfJ,eAeI,YAAwBD,GAAMF,GAEzCH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQpB,EALM,SAAAG,GAEjB,OADgBP,IAAMS,OAAN,UArBJ,eAqBI,YAA2BF,KC2DhCG,EA9EF,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WAqD7C,OACI,0BAAMC,SArDQ,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAQL,EAAQM,MAAK,SAAAC,GAAM,OAAIA,EAAOC,OAASV,EAAUU,QAE/D,GAAIH,EACA,GAAIP,EAAUW,SAAWJ,EAAMI,OAC3BC,OAAOC,MAAP,UAAgBb,EAAUU,KAA1B,wBACG,CACH,IAAMI,EAASF,OAAOG,QAAP,UAAkBf,EAAUU,KAA5B,+CACTM,EAAa,eAAQT,EAAR,CAAeI,OAAQX,EAAUW,SAChDG,GACAG,EACYV,EAAMX,GAAIoB,GACjBzB,MAAK,SAAA2B,GACFf,EAAWD,EAAQiB,KAAI,SAAAC,GAAG,OAAIA,EAAIxB,KAAOW,EAAMX,GAAKwB,EAAMF,MAC1DjB,EAAa,CACTS,KAAM,GACNC,OAAQ,aAM5BM,EACYjB,GACPT,MAAK,SAAA8B,GACFlB,EAAWD,EAAQoB,OAAOD,IAC1BpB,EAAa,CACTS,KAAM,GACNC,OAAQ,QAGfY,OAAM,SAAAC,GACHZ,OAAOC,MAAMW,EAAMhC,SAASC,KAAK+B,YAqBzC,qCAEI,2BACIC,UAAQ,EACRtC,MAAOa,EAAUU,KACjBtB,SArBS,SAACiB,GACtBJ,EAAa,CACTS,KAAML,EAAMqB,OAAOvC,MACnBwB,OAAQX,EAAUW,aAqBlB,6CAEI,2BACIc,UAAQ,EACRtC,MAAOa,EAAUW,OACjBvB,SAtBU,SAACiB,GACvBJ,EAAa,CACTS,KAAMV,EAAUU,KAChBC,OAAQN,EAAMqB,OAAOvC,YAsBrB,6BACI,4BAAQwC,KAAK,UAAb,UCXDC,EA3DI,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACd3B,EADc,KACLC,EADK,OAEa0B,mBAAS,CACvCnB,KAAM,GACNC,OAAQ,KAJS,mBAEdX,EAFc,KAEHC,EAFG,OAMO4B,mBAAS,IANhB,mBAMd5C,EANc,KAMN6C,EANM,KAcfC,EAAe,SAACtB,GAAD,OAAY,WACdG,OAAOG,QAAP,gCAAwCN,EAAOC,KAA/C,OAEXO,EACkBR,EAAOb,IACpBL,MAAK,WACFY,EAAWD,EAAQjB,QAAO,SAAAmC,GAAG,OAAIA,EAAIxB,KAAOa,EAAOb,YAKnEoC,qBAjBa,WACTf,IAEG1B,KAAKY,KAcI,IAEhB,IAIM8B,EAAehD,EACfiB,EAAQjB,QAAO,SAAAwB,GAET,OADc,IAAIyB,OAAJ,WAAejD,EAAf,KAA0B,KAC3BkD,KAAK1B,EAAOC,KAAK0B,kBAEpClC,EAEN,OACI,6BACI,yCACA,kBAAC,EAAD,CAAQjB,OAAQA,EAAQC,mBAdL,SAACmB,GACxByB,EAAUzB,EAAMqB,OAAOvC,UAcnB,uCACA,kBAAC,EAAD,CACIa,UAAWA,EACXC,aAAcA,EACdC,QAASA,EACTC,WAAYA,IAEhB,uCACC8B,EAAad,KAAI,SAAAV,GAAM,OACpB,yBAAK4B,IAAK5B,EAAOb,IACZa,EAAOC,KADZ,IACmBD,EAAOE,OAD1B,IACkC,4BAAQ2B,QAASP,EAAatB,IAA9B,gBC7BnC8B,MAjBf,YACI,OADkB,EAARC,MAEN,oCAUI,kBAAC,EAAD,QCXQC,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASpC,MACvB,2DCZNqC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5D,MAAK,SAAA6D,GACJA,EAAaC,gBAEd9B,OAAM,SAAAC,GACL8B,QAAQ9B,MAAMA,EAAM+B,c","file":"static/js/main.b0e09d59.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst Filter = ({filter, handleFilterChange}) => {\n    return (\n        <div>\n            filter shown with\n            <input\n                value={filter}\n                onChange={handleFilterChange}\n            />\n        </div>\n    );\n}\n\nexport default Filter;\n","import axios from 'axios';\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    return request\n        .then(response => response.data);\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject);\n    return request\n        .then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\n    return request\n        .then(response => response.data);\n}\n\nconst deletePerson = id => {\n    const request = axios.delete(`${baseUrl}/${id}`);\n    return request;\n}\n\nexport default { getAll, create, update, deletePerson };\n","import React from 'react';\nimport phonebookService from '../../services/phonebook';\n\nconst Form = ({newPerson, setNewPerson, persons, setPersons}) => {\n    const addPerson = (event) => {\n        event.preventDefault();\n        const match = persons.find(person => person.name === newPerson.name);\n\n        if (match) {\n            if (newPerson.number === match.number) {\n                window.alert(`${newPerson.name} already exists`);\n            } else {\n                const result = window.confirm(`${newPerson.name} already exists, replace the phone number?`);\n                const changedPerson = { ...match, number: newPerson.number };\n                if (result) {\n                    phonebookService\n                        .update(match.id, changedPerson)\n                        .then(updatedPerson => {\n                            setPersons(persons.map(per => per.id !== match.id ? per : updatedPerson));\n                            setNewPerson({\n                                name: '',\n                                number: ''\n                            });\n                        });\n                }\n            }\n        } else {\n            phonebookService\n                .create(newPerson)\n                .then(createdPerson => {\n                    setPersons(persons.concat(createdPerson));\n                    setNewPerson({\n                        name: '',\n                        number: ''\n                    });\n                })\n                .catch(error => {\n                    window.alert(error.response.data.error);\n                });\n        }\n    }\n\n    const handleNameChange = (event) => {\n        setNewPerson({\n            name: event.target.value,\n            number: newPerson.number\n        });\n    }\n\n    const handlePhoneChange = (event) => {\n        setNewPerson({\n            name: newPerson.name,\n            number: event.target.value\n        });\n    }\n\n    return (\n        <form onSubmit={addPerson}>\n            <div>\n                name:\n                <input\n                    required\n                    value={newPerson.name}\n                    onChange={handleNameChange}\n                />\n            </div>\n            <div>\n                phone number:\n                <input\n                    required\n                    value={newPerson.number}\n                    onChange={handlePhoneChange}\n                />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    );\n}\n\nexport default Form;\n","import React, { useState, useEffect } from 'react';\nimport Filter from '../Filter';\nimport Form from './Form';\nimport phonebookService from '../../services/phonebook';\n\nconst Part2bExer = () => {\n    const [persons, setPersons] = useState([]);\n    const [newPerson, setNewPerson] = useState({\n        name: '',\n        number: ''\n    });\n    const [filter, setFilter] = useState('');\n\n    const hook = () => {\n        phonebookService\n          .getAll()\n          .then(setPersons);\n    }\n\n    const handleDelete = (person) => () => {\n        const result = window.confirm(`Do you want to delete ${person.name}?`);\n        if (result) {\n            phonebookService\n                .deletePerson(person.id)\n                .then(() => {\n                    setPersons(persons.filter(per => per.id !== person.id));\n                });\n        }\n    }\n\n    useEffect(hook, []);\n\n    const handleFilterChange = (event) => {\n        setFilter(event.target.value);\n    }\n\n    const peopleToShow = filter\n        ? persons.filter(person => {\n                const regex = new RegExp(`(${filter})`, 'g');\n                return regex.test(person.name.toLowerCase());\n            })\n        : persons;\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Filter filter={filter} handleFilterChange={handleFilterChange} />\n            <h2>add new</h2>\n            <Form\n                newPerson={newPerson}\n                setNewPerson={setNewPerson}\n                persons={persons}\n                setPersons={setPersons}\n            />\n            <h2>Numbers</h2>\n            {peopleToShow.map(person =>\n                <div key={person.id}>\n                    {person.name} {person.number} <button onClick={handleDelete(person)}>delete</button>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default Part2bExer;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Part1ab from './components/Part1ab';\nimport Part1c from './components/Part1c';\nimport Part1d from './components/Part1d';\nimport Part1dexer from './components/Part1dexer';\nimport Part2 from './components/Part2';\nimport Part2bExer from './components/Part2bExer/Part2bExer';\nimport Part2cExer from './components/Part2cExer/Part2cExer';\n\nfunction App({notes}) {\n    return (\n        <>\n        {\n            // <Part1ab />\n            // <Part1c />\n            // <Part1d />\n            //<Part1dexer />\n            // <Part2 />\n            // <Part2bExer />\n            // <Part2cExer />\n        }\n            <Part2bExer />\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}